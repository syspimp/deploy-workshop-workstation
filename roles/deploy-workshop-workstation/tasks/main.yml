---
- name: "Include distribution specific config"
  include: "{{ ansible_distribution }}.yml"

- name: "create aws directory to store creds"
  file:
    path: /home/{{ aws.user }}/.aws
    state: directory

- name: "copy the aws credential template"
  template:
    src: aws-credentials.j2
    dest: /home/{{ aws.user }}/.aws/credentials

- name: "install needed ansible collections"
  shell: ansible-galaxy collection install community.{{ item }}
  #shell: ansible-galaxy collection install -p /usr/share/ansible/collections community.{{ item }}
  args:
    creates: "/home/{{ aws.user }}/.ansible/collections/ansible_collections/community/{{ item }}"
    #creates: "/usr/share/ansible/collections/ansible_collections/community/{{ item }}"
  #become: yes
  loop:
  - general
  - aws

- name: "clone the github repo"
  shell: |
    git clone https://github.com/ansible/workshops
    cd workshops/provisioner
    #ansible-galaxy collection build --verbose --force --output-path build/ ./..
    #ansible-galaxy collection install --verbose --force-with-deps build/*.tar.gz -p workshop_collections
    #git checkout {{ workshop_revision }}
  args:
    creates: /home/{{ aws.user }}/workshops

- name: "place the extra vars template"
  template:
    src: workshop.yml.j2
    dest: "/home/{{ aws.user }}/workshops/provisioner/workshop-{{ workshop.name }}.yml"

- name: "copy up the entitlement manifest"
  copy:
    src: manifest.zip
    dest: /home/{{ aws.user }}/workshops/provisioner/manifest.zip

- name: "Updating MOTD"
  template: 
    src: motd.j2
    dest: /etc/motd 
    owner: root 
    group: root 
    mode: 0644
  become: true

- name: "Add workshop service"
  template: 
    src: workshop.service.j2
    dest: /etc/systemd/system/workshop.service
    owner: root 
    group: root 
    mode: 0644
  become: true

- name: "Add workshop service files"
  template: 
    src: "{{ item }}.sh.j2"
    dest: "/home/{{ aws.user }}/workshops/provisioner/{{ item }}.sh"
    owner: "{{ aws.user }}" 
    group: "{{ aws.user }}"
    mode: 0755
  become: true
  loop:
  - provision
  - teardown

- name: "Put the role in the MOTD"
  shell: |
    cat /etc/ansible/facts.d/awsroles.fact >> /etc/motd
    echo -e "The workstation inventory is in /home/{{ aws.user }}/workshops/provisioner/workstation-inventory.\n\ncd to /home/{{ aws.user }}/workshops/provisioner, and execute:\n\n1) 'provision.sh' or\n2) 'ansible-playbook -e @workshop-{{ workshop.name }}.yml provision_lab.yml', or\n3) sudo 'systemctl start workshop' and check the logs to launch your ansible workshop.\n\n exectue teardown.sh or systemctl stop workshop to destroy the workshop.\n\n" >> /etc/motd
    echo -e "\n\n- Auto-Assignment website located at http://{{ workshop.name }}.{{ workshop.dns_zone }}, instructor can see workbench assignments at http://{{ workshop.name }}.{{ workshop.dns_zone }}/list.php\n- Private key is located at /home/{{ aws.user }}/workshops/provisioner/{{ workshop.name }}/{{ workshop.name }}-private.pem\n- Instructor inventory is located at  /home/{{ aws.user }}/workshops/provisioner/{{ workshop.name }}/instructor_inventory.txt\n" >> /etc/motd
  become: true

- name: "Fix permissions in /home/{{ aws.user }}"
  shell: |
    chown -r {{ aws.user }}.{{ aws.user }} /home/{{ aws.user }}
    restorecon -r /home/{{ aws.user }}
  become: true

- name: "systemctl daemon-reload"
  shell: |
    systemctl daemon-reload
  become: true

- name: "Finished! CLI instructions"
  debug:
    msg: "The workstation inventory is in ./workstation-inventory. Your sshkey is keys/{{ workshop.name }}-workstation/{{ workshop.name }}-workstation-key.ppk. ssh -i keys/{{ workshop.name }}-workstation/{{ workshop.name }}-workstation-key.ppk {{ aws.user }}@{{ inventory_hostname }}, cd to /home/{{ aws.user }}/workshops/provisioner, and execute ansible-playbook -e @workshop-{{ workshop.name }}.yml provision_lab.yml to launch your ansible workshop."

- name: "Install Tower to deploy from GUI, if desired"
  include: "tower.yml"
  when: workshop.towerinstall|bool == true

