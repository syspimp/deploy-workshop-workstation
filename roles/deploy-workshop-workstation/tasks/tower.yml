---
- name: "grab the latest tower tarball"
  unarchive:
    src: https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz
    dest: /opt/
    remote_src: yes
  become: yes

- name: "find the directory name"
  shell: |
    ls /opt | grep ansible
  register: optcontents

- name: "Set fact with the tower directory name"
  set_fact:
    towerdir: "{{ optcontents.stdout }}"

- name: "update the tower setup inventory file"
  template:
    src: tower-inventory.j2
    dest: /opt/{{ towerdir }}/inventory
  become: yes

- name: "run the tower installer"
  shell: |
    cd /opt/{{ towerdir }}
    ./setup.sh && touch /opt/.tower-setup
  register: towerinstalled
  become: yes
  args:
    creates: /opt/.tower-setup

- name: "upgrade boto3 for awx user for workshop deployments"
  shell: |
    source /var/lib/awx/venv/ansible/bin/activate
    umask 0022
    pip3 install --upgrade boto3
    deactivate
    touch /opt/.tower-setup2
  become: yes
  args:
    creates: /opt/.tower-setup2

- name: Load vault decrypted manifest into variable
  slurp:
    src: "/home/{{ aws.user }}/workshops/provisioner/manifest.zip"
  register: manifest_file

- name: Post manifest file and accept the EULA
  uri:
    url: https://{{ inventory_hostname }}/api/v2/config/
    method: POST
    user: admin
    password: "{{ workshop.default_password }}"
    body: '{ "eula_accepted": true, "manifest": "{{ manifest_file.content }}" }'
    body_format: json
    validate_certs: false
    force_basic_auth: true

- name: "list the installed pip dependencies for the awx user"
  shell: |
    source /var/lib/awx/venv/ansible/bin/activate
    umask 0022
    pip3 list
  register: piplist

- name: "install needed pip dependencies for awx user"
  shell: |
    source /var/lib/awx/venv/ansible/bin/activate
    umask 0022
    pip3 install {{ item }}
  when: item not in piplist.stdout
  loop: "{{ workshop_deps.pipmods }}"

- name: "install needed ansible collections for awx user"
  shell: |
    source /var/lib/awx/venv/ansible/bin/activate
    umask 0022
    ansible-galaxy collection install community.{{ item }}
  args:
    creates: "/var/lib/awx/.ansible/collections/ansible_collections/community/{{ item }}"
  loop:
  - general
  - aws

- name: "clone the workshop github repo to /var/lib/awx/projects"
  shell: |
    source /var/lib/awx/venv/ansible/bin/activate
    umask 0022
    cd /var/lib/awx/projects/
    git clone https://github.com/ansible/workshops
    cd workshops
    git checkout {{ workshop_revision }}
  become: yes
  args:
    executable: /bin/bash
    creates: /var/lib/awx/projects/workshops

- name: "place your workshop extra vars template in /var/lib/awx/projects/workshops/provisioner/workshop-{{ workshop.name }}"
  template:
    src: workshop.yml.j2
    dest: "/var/lib/awx/projects/workshops/provisioner/workshop-{{ workshop.name }}"
  become: yes

- name: "cp the workshop manifest.zip to awx projects"
  shell: |
    source /var/lib/awx/venv/ansible/bin/activate
    umask 0022
    cd /var/lib/awx/projects/workshops
    cp /home/{{ aws.user }}/workshops/provisioner/manifest.zip /var/lib/awx/projects/workshops/provisioner/
    chown -R awx.awx /var/lib/awx/
    restorecon -rV /var/lib/awx/
    deactivate
    touch /opt/.tower-setup3
  become: yes
  args:
    creates: /opt/.tower-setup3

- name: "create the tower backup to json objects script"
  template:
    src: "backup-tower-config-into-json.sh.j2"
    dest: "/home/{{ aws.user }}/backup-tower-config-into-json.sh"
    mode: 0755

- name: "copy some useful playbooks into the project"
  copy:
    src: "playbooks/"
    dest: "/var/lib/awx/projects/workshops/"
    mode: 0755
    owner: 'awx'
    group: 'awx'
  become: yes
  #loop:
  #- start-aws-vms
  #- stop-aws-vms
  #- launch-aws-vm

- name: "create the tower json objects"
  template:
    src: "{{ item }}.json.j2"
    dest: "/opt/{{ towerdir }}/import-{{ item }}.json"
  become: yes
  loop:
  - projects
  - credentials
  - job_templates
  - inventory
  - inventory_sources

- name: "import the workshop objects"
  shell: |
    $(TOWER_USERNAME=admin TOWER_PASSWORD={{ workshop.default_password }} /usr/local/bin/awx login -k -f human)
    /usr/local/bin/awx -k import < /opt/{{ towerdir }}/import-{{ item }}.json
  args:
    executable: /bin/bash
    creates: /opt/.tower-setup6
  loop:
  - projects
  - credentials
  - job_templates
  - inventory
  - inventory_sources

- name: "Fix permissions in /var/lib/awx/projects"
  shell: |
    chown -r awx.awx /var/lib/awx/projects/*
    restorecon -r /var/lib/awx/projects/*
  become: true

- name: "Reboot."
  shell: |
    shutdown -r +1 || true
  become: true
  register: rebootstatus
  args:
    executable: /bin/bash
    creates: /opt/.tower-setup6

- name: "idempotency for workshop"
  shell: touch /opt/.tower-setup6
  become: yes

- name: "Wait 5 to 11 mins for host to reboot"
  wait_for:
    port: 22
    host: "{{ inventory_hostname }}"
    search_regex: OpenSSH
    delay: 120
    timeout: 660
  delegate_to: localhost
  become: false
  when:
  - rebootstatus is defined
  - rebootstatus.changed|bool == true

- name: "Finished! Tower instructions"
  debug:
    msg: "Visit https://{{ inventory_hostname }}/ using user/pass admin/{{ workshop.default_password }}. There are two Job Templates, Deploy Workshop and Destroy Workshop pre-configured."

- name: "Finished! CLI instructions"
  debug:
    msg: "Your sshkey is keys/key.ppk. ssh -i keys/key.ppk {{ aws.user }}@{{ inventory_hostname }}, cd to /home/{{ aws.user }}/workshops/provisioner, and execute ansible-playbook -e @workshop-{{ workshop.name }}.yml provision_lab.yml to launch your ansible workshop."
