---
- name: Set the VM name
  set_fact:
    aws_instance_tags:
      Name: "{{ aws_vmname }}"

- name: Set the AMI to CentOS7
  set_fact:
    aws_image_ami: "{{ centos7_ami_id }}"
  when: "'centos7' in aws_ostype"

- name: Set the AMI to RHEL6
  set_fact:
    aws_image_ami: "{{ rhel6_ami_id }}"
  when: "'rhel6' in aws_ostype"

- name: Set the AMI to RHEL7
  set_fact:
    aws_image_ami: "{{ rhel7_ami_id }}"
  when: "'rhel7' in aws_ostype"

- name: Set the AMI to RHEL8
  set_fact:
    aws_image_ami: "{{ rhel8_ami_id }}"
  when: "'rhel8' in aws_ostype"

- name: "Gather information about any instance with a tag key Name: {{ workshop.name }}-workstation"
  community.aws.ec2_instance_info:
    region: "{{ aws.region }}"
    filters:
      "tag:Name": "{{ workshop.name }}-workstation"
  register: wrkshop_instances

- name: dump var
  debug: var=wrkshop_instances

- name: terminate ec2 instance in a vpc subnet
  amazon.aws.ec2:
    region: "{{ aws.region }}"
    instance_ids: 
      - "{{ item.instance_id }}"
    state: absent
  loop: "{{ wrkshop_instances.instances }}"
  when: wrkshop_instances.instances|length > 0

- name: get vpc subnet info
  amazon.aws.ec2_vpc_subnet_info:
    region: "{{ aws.region }}"
    filters:
      "tag:Name": "{{ aws_subnet_name }}"
  register: subnet
 
- name: "get the vpc id for vpc named {{ aws_vpc_name }}"
  amazon.aws.ec2_vpc_net_info:
    region: "{{ aws.region }}"
    filters:
      "tag:Name": "{{ aws_vpc_name }}"
  register: vpc

- name: dump var
  debug: var=vpc

- name: Gather information about any VPC route table with a tag key Name
  community.aws.ec2_vpc_route_table_info:
    region: "{{ aws.region }}"
    filters:
      "tag:Name": "{{ aws_route_name }}"
  register: route_table
 
- name: dump var
  debug: var=route_table

- name: Delete Route table for IGW
  ec2_vpc_route_table:
   state: absent
   vpc_id: "{{ vpc.vpcs[0].id }}"
   region: "{{ aws.region }}"
   route_table_id: "{{ route_table.route_tables[0].id }}"
   lookup: id
  when:
  - vpc.vpcs|length > 0
  - route_table.route_tables|length > 0

- name: "block to catch subnet error"
  block:
  - name: "wait a minute, give it time to delete"
    pause:
      minutes: 1
    when:
    - vpc.vpcs|length > 0
    - route_table.route_tables|length > 0
  
  - name: disassociate subnet to the VPC
    ec2_vpc_subnet:
     state: absent
     vpc_id: "{{ vpc.vpcs[0].id }}"
     region: "{{ aws.region }}"
     cidr: "{{ aws_vpc_cidr }}"
     map_public: yes
     resource_tags:
       Name: "{{ aws_subnet_name }}"
    retries: 3
    delay: 3
    when:
    - vpc.vpcs|length > 0

  rescue:
  - name: "[rescue] Need to wait another minute, unfortunately"
    debug:
      msg: "Trying again."

  - name: "[rescue] Waiting another minute"
    pause:
      minutes: 1
    when:
    - vpc.vpcs|length > 0
    - route_table.route_tables|length > 0
  
  - name: "[rescue] disassociate subnet to the VPC"
    ec2_vpc_subnet:
     state: absent
     vpc_id: "{{ vpc.vpcs[0].id }}"
     region: "{{ aws.region }}"
     cidr: "{{ aws_vpc_cidr }}"
     map_public: yes
     resource_tags:
       Name: "{{ aws_subnet_name }}"
    retries: 3
    delay: 3
    when:
    - vpc.vpcs|length > 0

- name: destroy IGW
  ec2_vpc_igw:
   region: "{{ aws.region }}"
   vpc_id: "{{ vpc.vpcs[0].id }}"
   state: absent
   tags:
     Name: "{{ aws_igw_name }}"
  when:
  - vpc.vpcs|length > 0

- name: Destroy Security Group
  ec2_group:
   state: absent
   name: "{{ workshop.name }} SG"
   region: "{{ aws.region }}"
   
- name: Destroy the VPC
  ignore_errors: yes
  ec2_vpc_net:
    name: "{{ aws_vpc_name }}"
    cidr_block: "{{ aws_vpc_cidr }}"
    region: "{{ aws.region }}"
    state: absent
  when:
  - vpc.vpcs|length > 0

#- name: Destroy ec2 key pair
#  ec2_key:
#    state: absent
#    name: "{{ workshop.name }}_keypair"
#    region: "{{ aws.region }}"
 
#- name: Remove the inventory file
#  file:
#    path: workstation-inventory
#    state: absent
