---
# Creates a new instance with provisioning userdata using Cloud-Init
# Once you run ./setup.sh and your group_vars/all is configured, run
# ansible-playbook -e "aws_vmname=my_cool_vm_name" launch-aws-vm.yml
- name: launch an instance in ec2
  hosts: localhost
  gather_facts: no
  vars_files: ../group_vars/all
  vars:
    aws_workstation_vpc: "{{ workshop.name }} vpc"
    aws_vpc_cidr: "11.22.33.0/24"
    aws_subnet_name: "{{ workshop.name }} subnet"
    aws_igw_name: "{{ workshop.name }} igw"
    aws_route_name: "{{ workshop.name }} route"
    ec2_key_directory: "{{ playbook_dir }}/../keys/"
    aws_role: deploy-workshop-workstation
    aws_ostype: fedora35
    aws_vmname: "aws test vm by ansible"
    aws_assign_public_ip: yes
    aws_volume_size: 150
    aws_security_group_name: "{{ workshop.name }}-sg-ansible"
    aws_security_group_allow_cidr: "0.0.0.0/0"
    rhel6_ami_id: ami-1643ff7e
    centos7_ami_id: ami-0affd4508a5d2481b
    rhel7_ami_id: ami-0315fe0b0bfdfedda
    rhel8_ami_id: ami-058f90e71a7d69115
    fedora35_ami_id: ami-08b4ee602f76bff79
    aws_instance_type: t3.medium
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws.keyid }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws.secret }}"
  tasks:

    - name: Set the VM name
      set_fact:
        aws_instance_tags:
          Name: "{{ aws_vmname }}"

    - name: Set the AMI to CentOS7
      set_fact:
        aws_image_ami: "{{ centos7_ami_id }}"
      when: "'centos7' in aws_ostype"

    - name: Set the AMI to RHEL6
      set_fact:
        aws_image_ami: "{{ rhel6_ami_id }}"
      when: "'rhel6' in aws_ostype"

    - name: Set the AMI to RHEL7
      set_fact:
        aws_image_ami: "{{ rhel7_ami_id }}"
        aws_user: "ec2-user"
      when: "'rhel7' in aws_ostype"

    - name: Set the AMI to RHEL8
      set_fact:
        aws_image_ami: "{{ rhel8_ami_id }}"
        aws_user: "ec2-user"
      when: "'rhel8' in aws_ostype"

    - name: Set the AMI to Fedora 35
      set_fact:
        aws_image_ami: "{{ fedora35_ami_id }}"
        aws_user: "fedora"
      when: "'fedora' in aws_ostype"

    - name: Set the VM roles
      set_fact:
        awsroles:
          - section: default
            vars:
            - name: role
              value: "{{ aws_vmname }}"
    
    - name: See if vm instance exists already
      community.aws.ec2_instance_info:
        region: "{{ aws.region }}"
        filters:
          "tag:Name": "{{ aws_vmname }}"
          instance-state-name: [ "running"]
      register: wrkshop_instances

    - name: debug instances
      debug:
        var: wrkshop_instances
  
    - name: create the vm block
      block:
      - name: create workstation VPC
        ec2_vpc_net:
          name: "{{ aws_workstation_vpc }}"
          cidr_block: "{{ aws_vpc_cidr }}"
          region: "{{ aws.region }}"
          state: present
        register: vpc
  
      - name: debug vpc
        debug:
          var: vpc
   
      - name: associate subnet to the VPC
        ec2_vpc_subnet:
         state: present
         vpc_id: "{{ vpc.vpc.id }}"
         region: "{{ aws.region }}"
         cidr: "{{ aws_vpc_cidr }}"
         map_public: yes
         resource_tags:
           Name: "{{ aws_subnet_name }}"
        register: subnet
       
      - name: create IGW
        ec2_vpc_igw:
         vpc_id: "{{ vpc.vpc.id }}"
         region: "{{ aws.region }}"
         state: "present"
         tags:
           Name: "{{ aws_igw_name }}"
        register: igw
        
      - name: Route IGW
        ec2_vpc_route_table:
         vpc_id: "{{ vpc.vpc.id }}"
         region: "{{ aws.region }}"
         subnets:
           - "{{ subnet.subnet.id }}"
         routes:
           - dest: 0.0.0.0/0
             gateway_id: "{{ igw.gateway_id  }}"
         tags:
           Name: "{{ aws_route_name }}"
      
      - name: Create Security Group
        ec2_group:
         name: "{{ workshop.name }} SG"
         description: "{{ workshop.name }} Security Group, created by ansible"
         vpc_id: "{{ vpc.vpc.id }}"
         region: "{{ aws.region }}"
         rules:
           - proto: tcp
             from_port: 1
             to_port: 65535
             cidr_ip: "{{ aws_security_group_allow_cidr }}"
           - proto: udp
             from_port: 161
             to_port: 161
             cidr_ip: "{{ aws_security_group_allow_cidr }}"
           - proto: udp
             from_port: 30514
             to_port: 30514
             cidr_ip: "{{ aws_security_group_allow_cidr }}"
        register: security_group
     
      - name: create a new ec2 key pair
        ec2_key:
          name: "{{ aws_vmname }}_keypair"
          region: "{{ aws.region }}"
        register: keypair
       
      - name: "create key directory"
        file:
          path: "{{ ec2_key_directory }}/{{ aws_vmname}}"
          state: directory
  
      - name: Copy EC2 Private Key locally so it can be later on used to SSH into the instance
        copy:
          content: "{{ keypair.key.private_key }}"
          dest: "{{ ec2_key_directory }}/{{ aws_vmname}}/{{ aws_vmname}}-key.ppk"
          mode: 0600
        when: keypair.changed == true
       
   
      - name: launch an ec2 instance in a vpc subnet
        register: ec2results
        ec2:
          key_name: "{{ keypair.key.name }}"
          instance_type: "{{ aws.instance_type }}"
          image: "{{ aws_image_ami }}"
          wait: yes
          group_id: "{{ security_group.group_id }}"
          count: 1
          vpc_subnet_id:  "{{ subnet.subnet.id }}"
          assign_public_ip: yes
          region: "{{ aws.region }}"
          instance_tags: "{{ aws_instance_tags }}"
          volumes:
            - device_name: /dev/sda1
              volume_type: gp2
              volume_size: "{{ aws.volume_size }}"
              delete_on_termination: true
          user_data: |
            {{ lookup('template', '{{ playbook_dir }}/../templates/cloud-config.yml.j2') }}
      when: wrkshop_instances.instances|length == 0
      # end create vm block

    - name: Save the public ip from the old deployment
      set_fact:
        public_ip: "{{ wrkshop_instances.instances[0].public_ip_address }}"
      when: wrkshop_instances.instances|length == 1

    - name: Save the public ip from the new deployment
      set_fact:
        public_ip: "{{ ec2results.instances[0].public_ip }}"
      when: wrkshop_instances.instances|length == 0

    - name: Add new instance to host group
      add_host:
        hostname: "{{ public_ip }}"
        groupname: launched

    - name: "Wait 2 to 11 mins for host to boot"
      wait_for:
        port: 22
        host: "{{ public_ip }}"
        search_regex: OpenSSH
        delay: 60
        timeout: 660
      delegate_to: localhost
      become: false
      when: wrkshop_instances.instances|length == 0

    - name: "Create ./aws-inventory file"
      template:
        src: "{{ playbook_dir }}/../templates/aws-inventory.j2"
        dest: "{{ playbook_dir }}/../aws-inventory"
        mode: 0644

    - name: "Finished!"
      debug:
        msg: "Your sshkey is keys/{{ aws_vmname }}/{{ aws_vmname }}-key.ppk. ssh -i keys/{{ aws_vmname }}/{{ aws_vmname }}-key.ppk {{ aws.user }}@{{ public_ip }}"

- name: Configure launched vm
  hosts: launched
  become: no
  vars_files: ../group_vars/all
  vars:
    ec2_key_directory: "{{ playbook_dir }}/../keys/"
    ansible_user: "{{ aws_user }}"
    ansible_ssh_private_key_file: "{{ ec2_key_directory }}/{{ aws_vmname }}/{{ aws_vmname }}-key.ppk"
  gather_facts: True
  roles:
    - ../roles/deploy-vm

- name: Configure extra roles
  hosts: launched
  become: yes
  gather_facts: True
  vars:
    ec2_key_directory: "{{ playbook_dir }}/../keys/"
    ansible_user: "{{ aws_user }}"
    ansible_ssh_private_key_file: "{{ ec2_key_directory }}/{{ aws_vmname }}/{{ aws_vmname }}-key.ppk"
  roles:
    - role: performancecopilot.metrics.grafana
    - role: performancecopilot.metrics.pcp
      vars:
        pcp_rest_api: yes

- name: Show instructions
  hosts: launched
  become: no
  vars_files: ../group_vars/all
  gather_facts: no
  tasks:
    - name: "CLI instructions"
      debug:
        msg: "Your sshkey is keys/{{ aws_vmname }}/{{ aws_vmname }}-key.ppk. ssh -i keys/{{ aws_vmname }}/{{ aws_vmname }}-key.ppk {{ aws.user }}@{{ inventory_hostname }}"

    - name: "Web browser instructions"
      debug:
        msg: "Visit https://{{ inventory_hostname }}:9090 and login using username/password {{ aws.user }}/{{ aws.root_password }}"
